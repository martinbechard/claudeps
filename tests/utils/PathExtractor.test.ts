/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /src/utils/__tests__/PathExtractor.test.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Test suite for PathExtractor utility functions
 */
import { describe, expect, it } from "@jest/globals";
import {
  extractPath,
  extractPathFromComments,
  extractPathFromSpecialCases,
  filterPathFromSubdirectories,
} from "src/utils/PathExtractor";

describe("PathExtractor", () => {
  describe("extractPathFromComments", () => {
    it("extracts path from single-line comments with File:", () => {
      const content = `// Copyright notice
// License info
// File: src/utils/test.ts
function test() {}`;
      expect(extractPathFromComments(content)).toBe("src/utils/test.ts");
    });

    it("extracts path from single-line comments with Path:", () => {
      const content = `// Copyright notice
// Path: src/components/Component.tsx
class Component {}`;
      expect(extractPathFromComments(content)).toBe(
        "src/components/Component.tsx"
      );
    });

    it("extracts path from block comments", () => {
      const content = `/*
 * Copyright notice
 * File: src/services/Service.ts
 */
class Service {}`;
      expect(extractPathFromComments(content)).toBe("src/services/Service.ts");
    });

    it("extracts path from block comments without asterisks", () => {
      const content = `/*
Copyright notice
File: src/models/Model.ts
*/
class Model {}`;
      expect(extractPathFromComments(content)).toBe("src/models/Model.ts");
    });

    it("handles Windows-style paths", () => {
      const content = `// File: C:\\Users\\dev\\src\\utils\\test.ts`;
      expect(extractPathFromComments(content)).toBe(
        "C:\\Users\\dev\\src\\utils\\test.ts"
      );
    });

    it("handles paths with spaces", () => {
      const content = `// File: /User Content/My Project/src/test.ts`;
      expect(extractPathFromComments(content)).toBe(
        "/User Content/My Project/src/test.ts"
      );
    });

    it("extracts path from absolute path format", () => {
      const content = `// /usr/local/src/test.ts`;
      expect(extractPathFromComments(content)).toBe("/usr/local/src/test.ts");
    });

    it("ignores paths after non-comment lines", () => {
      const content = `const x = 1;
// File: src/test.ts`;
      expect(extractPathFromComments(content)).toBeUndefined();
    });

    it("handles empty or whitespace content", () => {
      expect(extractPathFromComments("")).toBeUndefined();
      expect(extractPathFromComments("   \n   ")).toBeUndefined();
    });

    it("ignores paths after first 20 lines", () => {
      const content =
        Array(21).fill("// dummy line").join("\n") + "\n// File: src/test.ts";
      expect(extractPathFromComments(content)).toBeUndefined();
    });
  });

  describe("extractPathFromSpecialCases", () => {
    it("extracts path from JSON with _path", () => {
      const content = `{
                "_copyright": "Copyright notice",
                "_path": "/src/config.json"
            }`;
      expect(extractPathFromSpecialCases(content)).toBe("/src/config.json");
    });

    it("extracts path from JSON with _file", () => {
      const content = `{
                "_copyright": "Copyright notice",
                "_file": "/src/manifest.json"
            }`;
      expect(extractPathFromSpecialCases(content)).toBe("/src/manifest.json");
    });

    it("prefers _path over _file in JSON", () => {
      const content = `{
                "_path": "/src/config.json",
                "_file": "/src/other.json"
            }`;
      expect(extractPathFromSpecialCases(content)).toBe("/src/config.json");
    });

    it("returns undefined for invalid JSON", () => {
      const content = `{ invalid json }`;
      expect(extractPathFromSpecialCases(content)).toBeUndefined();
    });

    it("returns undefined for JSON without path properties", () => {
      const content = `{ "prop": "value" }`;
      expect(extractPathFromSpecialCases(content)).toBeUndefined();
    });
  });

  describe("extractPath", () => {
    it("extracts path from comments when available", () => {
      const content = `// File: src/test.ts`;
      expect(extractPath(content)).toBe("src/test.ts");
    });

    it("extracts path from JSON when available", () => {
      const content = `{ "_path": "/src/config.json" }`;
      expect(extractPath(content)).toBe("/src/config.json");
    });

    it("returns undefined when no path found", () => {
      const content = `const x = 1;`;
      expect(extractPath(content)).toBeUndefined();
    });

    it("handles real-world examples", () => {
      const examples = [
        {
          content: `/**
                     * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
                     * This software is licensed under the MIT License.
                     * File: /Users/martinbechard/dev/claudeext/src/ClaudeExtension.ts
                     */`,
          expected: "/Users/martinbechard/dev/claudeext/src/ClaudeExtension.ts",
        },
        {
          content: `{
                        "_copyright": "Copyright (c) 2024 Martin Bechard",
                        "_license": "MIT License",
                        "_path": "/Users/martinbechard/dev/claudeext/src/manifest.json"
                    }`,
          expected: "/Users/martinbechard/dev/claudeext/src/manifest.json",
        },
      ];

      examples.forEach(({ content, expected }) => {
        expect(extractPath(content)).toBe(expected);
      });
    });
  });
});

describe("filterPathFromSubdirectories", () => {
  it("should return path from first 'src' occurrence in Unix-style path", () => {
    const path = "/usr/local/myapp/src/utils/test.ts";
    expect(filterPathFromSubdirectories(path, ["src"])).toBe(
      "src/utils/test.ts"
    );
  });

  it("should handle Unix-style path starting with subdirectory", () => {
    const path = "/src/utils/test.ts";
    expect(filterPathFromSubdirectories(path, ["src"])).toBe(
      "src/utils/test.ts"
    );
  });

  it("should return path from first 'src' occurrence in Windows-style path", () => {
    const path = "C:\\Program Files\\MyApp\\src\\utils\\test.ts";
    expect(filterPathFromSubdirectories(path, ["src"])).toBe(
      "src\\utils\\test.ts"
    );
  });

  it("should return full path when no specified subdirectory is found", () => {
    const path = "/usr/local/myapp/utils/test.ts";
    expect(filterPathFromSubdirectories(path, ["src", "docs"])).toBe(
      "/usr/local/myapp/utils/test.ts"
    );
  });

  it("should handle path with multiple subdirectory options", () => {
    const path = "/usr/local/myapp/docs/src/utils/test.ts";
    expect(filterPathFromSubdirectories(path, ["src", "docs"])).toBe(
      "docs/src/utils/test.ts"
    );
  });
});

describe("extractPath with subdirectory filtering in comment blocks", () => {
  it("should extract path from comment and return from first 'src' occurrence", () => {
    const content = `// File: /usr/local/myapp/src/utils/test.ts`;
    expect(extractPath(content, ["src"])).toBe("src/utils/test.ts");
  });

  it("should extract Unix-style path starting with subdirectory from comment", () => {
    const content = `// File: /src/utils/test.ts`;
    expect(extractPath(content, ["src"])).toBe("src/utils/test.ts");
  });

  it("should extract Windows-style path from comment and return from first 'src' occurrence", () => {
    const content = `// File: C:\\Program Files\\MyApp\\src\\utils\\test.ts`;
    expect(extractPath(content, ["src"])).toBe("src\\utils\\test.ts");
  });

  it("should extract full path from comment when no specified subdirectory is found", () => {
    const content = `// File: /usr/local/myapp/utils/test.ts`;
    expect(extractPath(content, ["src", "docs"])).toBe(
      "/usr/local/myapp/utils/test.ts"
    );
  });

  it("should extract path from comment with multiple subdirectory options", () => {
    const content = `// File: /usr/local/myapp/docs/src/utils/test.ts`;
    expect(extractPath(content, ["src", "docs"])).toBe(
      "docs/src/utils/test.ts"
    );
  });
});
