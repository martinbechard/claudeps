/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/ui/components/ContentPreview.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

import { DraggableManager } from "./DraggableManager";

declare global {
  interface Window {
    Prism?: {
      highlight: (code: string, grammar: any, language: string) => string;
      languages: { [key: string]: any };
    };
    marked?: {
      parse: (markdown: string, options?: any) => string;
    };
  }
}

const styles = {
  colors: {
    primary: "#0066cc",
    border: "#ccc",
    text: "#333",
    background: "#fff",
    codeBg: "#f5f5f5",
  },
  spacing: {
    sm: "8px",
    md: "16px",
    lg: "24px",
  },
  borderRadius: "8px",
  fontSize: {
    sm: "14px",
    md: "16px",
    lg: "18px",
  },
};

export class ContentPreview {
  private readonly dialog: HTMLElement;
  private readonly content: HTMLElement;
  private readonly header: HTMLElement;
  private isOpen: boolean = false;
  private draggableManager: DraggableManager;
  private static baseZIndex: number = 1000003; // Match ConversationPreview's z-index
  private static windowCount: number = 0;

  constructor() {
    // Initialize elements in constructor
    this.dialog = document.createElement("div");
    this.content = document.createElement("div");
    this.header = document.createElement("div");
    this.createDialog();
    this.draggableManager = new DraggableManager(this.dialog, this.header);
  }

  private createDialog(): void {
    // Create container
    this.dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 800px;
        max-width: 90%;
        max-height: 80vh;
        z-index: ${ContentPreview.baseZIndex};
        display: none;
      `;

    // Create content container
    this.content.style.cssText = `
        background: ${styles.colors.background};
        border-radius: ${styles.borderRadius};
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        position: relative;
      `;

    // Create header for dragging
    this.header.style.cssText = `
        padding: ${styles.spacing.md};
        border-bottom: 1px solid ${styles.colors.border};
        cursor: move;
      `;

    this.dialog.appendChild(this.content);
    document.body.appendChild(this.dialog);

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && this.isOpen) {
        this.close();
      }
    });
  }

  private getLanguageFromFileName(fileName: string): string {
    const parts = fileName.split(".");
    // If there's no extension, treat as markdown
    if (parts.length === 1) {
      return "markdown";
    }

    const ext = parts.pop()?.toLowerCase() || "";
    const languageMap: { [key: string]: string } = {
      js: "javascript",
      ts: "typescript",
      jsx: "javascript",
      tsx: "typescript",
      py: "python",
      java: "java",
      rb: "ruby",
      go: "go",
      rs: "rust",
      cpp: "cpp",
      c: "c",
      cs: "csharp",
      php: "php",
      html: "html",
      css: "css",
      json: "json",
      md: "markdown",
      yml: "yaml",
      yaml: "yaml",
      xml: "xml",
      sql: "sql",
      sh: "bash",
      bash: "bash",
      txf: "markdown", // Added .txf as markdown
    };
    return languageMap[ext] || "plaintext";
  }

  private createCloseButton(): HTMLButtonElement {
    const button = document.createElement("button");
    button.innerHTML = "Ã—";
    button.style.cssText = `
        position: absolute;
        top: ${styles.spacing.sm};
        right: ${styles.spacing.sm};
        font-size: ${styles.fontSize.lg};
        border: none;
        background: none;
        color: ${styles.colors.text};
        cursor: pointer;
        padding: ${styles.spacing.sm};
        border-radius: 4px;
        z-index: 1;
      `;

    button.addEventListener("mouseover", () => {
      button.style.backgroundColor = styles.colors.codeBg;
    });

    button.addEventListener("mouseout", () => {
      button.style.backgroundColor = "transparent";
    });

    button.addEventListener("click", () => this.close());
    return button;
  }

  private calculateWindowPosition(): { top: number; left: number } {
    const gap = 20;
    const windowWidth = 800; // Width of our dialog
    const windowHeight = Math.min(window.innerHeight * 0.8, 600); // Max height of our dialog

    // Get all existing preview windows
    const existingWindows = document.querySelectorAll("[data-preview-window]");

    if (existingWindows.length === 0) {
      // First window - center it
      return {
        top: (window.innerHeight - windowHeight) / 2,
        left: (window.innerWidth - windowWidth) / 2,
      };
    }

    // Get the last window's position
    const lastWindow = existingWindows[
      existingWindows.length - 1
    ] as HTMLElement;
    const lastRect = lastWindow.getBoundingClientRect();

    // Try positioning to the right
    let left = lastRect.right + gap;
    let top = lastRect.top;

    // If positioning to the right would put the window off screen
    if (left + windowWidth > window.innerWidth) {
      // Position below the first window instead, back at the left side
      const firstWindow = existingWindows[0] as HTMLElement;
      const firstRect = firstWindow.getBoundingClientRect();
      left = firstRect.left;
      top = lastRect.bottom + gap;

      // If positioning below would put the window off screen
      if (top + windowHeight > window.innerHeight) {
        // Start a new column at the top, slightly offset from the first window
        top = firstRect.top + gap;
        left = firstRect.left + gap;
      }
    }

    // Ensure we don't position off screen
    left = Math.max(gap, Math.min(left, window.innerWidth - windowWidth - gap));
    top = Math.max(gap, Math.min(top, window.innerHeight - windowHeight - gap));

    return { top, left };
  }

  public show(title: string, content: string, fileName: string): void {
    // Reset content
    this.content.innerHTML = "";

    // Update header
    this.header.innerHTML = "";
    const titleElement = document.createElement("h2");
    titleElement.style.cssText = `
        margin: 0;
        font-size: ${styles.fontSize.lg};
        font-weight: 600;
        color: ${styles.colors.text};
      `;
    titleElement.textContent = title;
    this.header.appendChild(titleElement);

    // Create content container
    const contentContainer = document.createElement("div");
    contentContainer.style.cssText = `
        padding: ${styles.spacing.md};
        overflow-y: auto;
        flex: 1;
        min-height: 200px;
        max-height: calc(80vh - 100px);
        font-size: ${styles.fontSize.sm};
        line-height: 1.5;
      `;

    const language = this.getLanguageFromFileName(fileName);

    // Handle markdown files
    if (language === "markdown") {
      contentContainer.style.fontFamily =
        "system-ui, -apple-system, sans-serif";
      contentContainer.style.background = styles.colors.background;
      contentContainer.style.whiteSpace = "normal";

      if (window.marked) {
        contentContainer.innerHTML = window.marked.parse(content);
      } else {
        // Fallback if marked isn't available
        contentContainer.textContent = content;
        console.warn("Marked library not available for markdown parsing");
      }

      // Add styles for markdown content
      const style = document.createElement("style");
      style.textContent = `
        .content-preview-markdown h1, 
        .content-preview-markdown h2, 
        .content-preview-markdown h3 { margin-top: 1.5em; margin-bottom: 0.5em; }
        .content-preview-markdown p { margin: 1em 0; }
        .content-preview-markdown code { background: ${styles.colors.codeBg}; padding: 0.2em 0.4em; border-radius: 3px; }
        .content-preview-markdown pre { background: ${styles.colors.codeBg}; padding: 1em; border-radius: 5px; overflow-x: auto; }
        .content-preview-markdown pre code { background: none; padding: 0; }
        .content-preview-markdown ul, .content-preview-markdown ol { padding-left: 2em; }
        .content-preview-markdown blockquote { border-left: 4px solid ${styles.colors.border}; margin: 0; padding-left: 1em; }
        .content-preview-markdown table { border-collapse: collapse; width: 100%; }
        .content-preview-markdown th, .content-preview-markdown td { border: 1px solid ${styles.colors.border}; padding: 8px; text-align: left; }
        .content-preview-markdown th { background-color: ${styles.colors.codeBg}; }
      `;
      contentContainer.classList.add("content-preview-markdown");
      document.head.appendChild(style);
    }
    // Handle code files
    else {
      contentContainer.style.fontFamily = "monospace";
      contentContainer.style.background = styles.colors.codeBg;
      contentContainer.style.whiteSpace = "pre";

      if (language !== "plaintext") {
        contentContainer.className = `language-${language}`;
        if (window.Prism && window.Prism.languages[language]) {
          contentContainer.innerHTML = window.Prism.highlight(
            content,
            window.Prism.languages[language],
            language
          );
        } else {
          contentContainer.textContent = content;
        }
      } else {
        contentContainer.textContent = content;
      }
    }

    // Add close button
    const closeButton = this.createCloseButton();

    // Assemble dialog
    this.content.appendChild(closeButton);
    this.content.appendChild(this.header);
    this.content.appendChild(contentContainer);

    // Position window
    const position = this.calculateWindowPosition();
    this.dialog.style.transform = "none";
    this.dialog.style.top = `${position.top}px`;
    this.dialog.style.left = `${position.left}px`;

    // Increment window count and update z-index
    ContentPreview.windowCount++;
    this.dialog.style.zIndex = `${
      ContentPreview.baseZIndex + ContentPreview.windowCount
    }`;

    // Add identifier for window positioning
    this.dialog.setAttribute("data-preview-window", "");

    // Show dialog with animation
    this.dialog.style.display = "block";
    this.dialog.style.opacity = "0";
    setTimeout(() => {
      this.dialog.style.transition = "opacity 0.2s ease-out";
      this.dialog.style.opacity = "1";
    }, 0);

    this.isOpen = true;
  }

  public close(): void {
    if (!this.isOpen) return;

    this.dialog.style.opacity = "0";
    setTimeout(() => {
      this.dialog.style.display = "none";
      this.content.innerHTML = "";
      ContentPreview.windowCount--;
    }, 200);

    this.isOpen = false;
  }

  public destroy(): void {
    this.draggableManager.destroy();
    this.dialog.remove();
  }
}
