/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/ui/components/ContentPreview.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

declare global {
  interface Window {
    Prism?: {
      highlight: (code: string, grammar: any, language: string) => string;
      languages: { [key: string]: any };
    };
  }
}

const styles = {
  colors: {
    primary: "#0066cc",
    border: "#ccc",
    text: "#333",
    background: "#fff",
    overlay: "rgba(0, 0, 0, 0.5)",
    codeBg: "#f5f5f5",
  },
  spacing: {
    sm: "8px",
    md: "16px",
    lg: "24px",
  },
  borderRadius: "8px",
  fontSize: {
    sm: "14px",
    md: "16px",
    lg: "18px",
  },
};

export class ContentPreview {
  private readonly dialog: HTMLElement;
  private readonly content: HTMLElement;
  private isOpen: boolean = false;

  constructor() {
    // Initialize elements in constructor
    this.dialog = document.createElement("div");
    this.content = document.createElement("div");
    this.createDialog();
  }

  private createDialog(): void {
    // Create overlay container
    this.dialog.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: ${styles.colors.overlay};
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000000;
      `;

    // Create content container
    this.content.style.cssText = `
        background: ${styles.colors.background};
        border-radius: ${styles.borderRadius};
        width: 800px;
        max-width: 90%;
        max-height: 80vh;
        display: flex;
        flex-direction: column;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        position: relative;
      `;

    this.dialog.appendChild(this.content);
    document.body.appendChild(this.dialog);

    // Close on background click
    this.dialog.addEventListener("click", (e) => {
      if (e.target === this.dialog) {
        this.close();
      }
    });

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && this.isOpen) {
        this.close();
      }
    });
  }

  private getLanguageFromFileName(fileName: string): string {
    const ext = fileName.split(".").pop()?.toLowerCase() || "";
    const languageMap: { [key: string]: string } = {
      js: "javascript",
      ts: "typescript",
      jsx: "javascript",
      tsx: "typescript",
      py: "python",
      java: "java",
      rb: "ruby",
      go: "go",
      rs: "rust",
      cpp: "cpp",
      c: "c",
      cs: "csharp",
      php: "php",
      html: "html",
      css: "css",
      json: "json",
      md: "markdown",
      yml: "yaml",
      yaml: "yaml",
      xml: "xml",
      sql: "sql",
      sh: "bash",
      bash: "bash",
    };
    return languageMap[ext] || "plaintext";
  }

  private createCloseButton(): HTMLButtonElement {
    const button = document.createElement("button");
    button.innerHTML = "Ã—";
    button.style.cssText = `
        position: absolute;
        top: ${styles.spacing.sm};
        right: ${styles.spacing.sm};
        font-size: ${styles.fontSize.lg};
        border: none;
        background: none;
        color: ${styles.colors.text};
        cursor: pointer;
        padding: ${styles.spacing.sm};
        border-radius: 4px;
        z-index: 1;
      `;

    button.addEventListener("mouseover", () => {
      button.style.backgroundColor = styles.colors.codeBg;
    });

    button.addEventListener("mouseout", () => {
      button.style.backgroundColor = "transparent";
    });

    button.addEventListener("click", () => this.close());
    return button;
  }

  public show(title: string, content: string, fileName: string): void {
    // Reset content
    this.content.innerHTML = "";

    // Create header
    const header = document.createElement("div");
    header.style.cssText = `
        padding: ${styles.spacing.md} ${styles.spacing.lg};
        border-bottom: 1px solid ${styles.colors.border};
      `;

    const titleElement = document.createElement("h2");
    titleElement.style.cssText = `
        margin: 0;
        font-size: ${styles.fontSize.lg};
        font-weight: 600;
        color: ${styles.colors.text};
      `;
    titleElement.textContent = title;
    header.appendChild(titleElement);

    // Create content container
    const contentContainer = document.createElement("div");
    contentContainer.style.cssText = `
        padding: ${styles.spacing.md};
        overflow-y: auto;
        flex: 1;
        min-height: 200px;
        max-height: calc(80vh - 100px);
        background: ${styles.colors.codeBg};
        font-family: monospace;
        white-space: pre;
        font-size: ${styles.fontSize.sm};
        line-height: 1.5;
      `;

    // Add content as code block if applicable
    const language = this.getLanguageFromFileName(fileName);
    if (language !== "plaintext") {
      contentContainer.className = `language-${language}`;

      // Apply syntax highlighting if Prism is available
      if (window.Prism && window.Prism.languages[language]) {
        contentContainer.innerHTML = window.Prism.highlight(
          content,
          window.Prism.languages[language],
          language
        );
      } else {
        contentContainer.textContent = content;
      }
    } else {
      contentContainer.textContent = content;
    }

    // Add close button
    const closeButton = this.createCloseButton();

    // Assemble dialog
    this.content.appendChild(closeButton);
    this.content.appendChild(header);
    this.content.appendChild(contentContainer);

    // Show dialog with animation
    this.dialog.style.display = "flex";
    this.dialog.style.opacity = "0";
    setTimeout(() => {
      this.dialog.style.transition = "opacity 0.2s ease-out";
      this.dialog.style.opacity = "1";
    }, 0);

    this.isOpen = true;
  }

  public close(): void {
    if (!this.isOpen) return;

    this.dialog.style.opacity = "0";
    setTimeout(() => {
      this.dialog.style.display = "none";
      this.content.innerHTML = "";
    }, 200);

    this.isOpen = false;
  }

  public destroy(): void {
    this.dialog.remove();
  }
}
