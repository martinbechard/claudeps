/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/ui/components/SearchResultPreview.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Component for displaying detailed search results in a modal window
 */

import type { SearchResultInfo } from "../../types";
import { ConversationRetrieval } from "../../services/ConversationRetrieval";
import { getOrganizationId } from "../../utils/getClaudeIds";

export class SearchResultPreview {
  private dialog: HTMLDialogElement;
  private content: HTMLDivElement;
  private onViewConversation: (
    conversationId: string,
    messageId: string
  ) => void;

  constructor(
    onViewConversation: (conversationId: string, messageId: string) => void
  ) {
    this.dialog = document.createElement("dialog");
    this.content = document.createElement("div");
    this.onViewConversation = onViewConversation;
    this.setupDialog();
  }

  private setupDialog(): void {
    // Style the dialog
    this.dialog.style.cssText = `
      padding: 0;
      border: none;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      max-width: 800px;
      width: 90vw;
      max-height: 80vh;
      background: white;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000002;
    `;

    // Create header
    const header = document.createElement("div");
    header.style.cssText = `
      padding: 16px;
      background: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-radius: 8px 8px 0 0;
    `;

    const title = document.createElement("h2");
    title.style.cssText = `
      margin: 0;
      font-size: 18px;
      color: #333;
    `;
    title.textContent = "Search Result Details";

    const closeButton = document.createElement("button");
    closeButton.style.cssText = `
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      color: #666;
      padding: 4px 8px;
    `;
    closeButton.textContent = "Ã—";
    closeButton.addEventListener("click", () => this.hide());

    header.appendChild(title);
    header.appendChild(closeButton);

    // Style the content container
    this.content.style.cssText = `
      padding: 16px;
      max-height: calc(80vh - 120px);
      overflow-y: auto;
    `;

    // Add components to dialog
    this.dialog.appendChild(header);
    this.dialog.appendChild(this.content);

    // Add dialog to document
    document.body.appendChild(this.dialog);
  }

  private showError(container: HTMLElement, message: string): void {
    const errorDiv = document.createElement("div");
    errorDiv.style.cssText = `
      color: #dc3545;
      padding: 8px 12px;
      background: #fff5f5;
      border-radius: 4px;
      margin-top: 8px;
      font-size: 14px;
    `;
    errorDiv.textContent = message;

    // Remove any existing error messages
    const existingError = container.querySelector("[data-error]");
    if (existingError) {
      existingError.remove();
    }

    errorDiv.setAttribute("data-error", "true");
    container.appendChild(errorDiv);
  }

  /**
   * Shows the preview dialog with search result details or error information
   */
  public show(result: SearchResultInfo | string): void {
    this.content.innerHTML = "";

    // If result is a string, it's an error message
    if (typeof result === "string") {
      const errorSection = {
        title: "Error Details",
        content: result,
        style: `
          font-size: 14px;
          line-height: 1.5;
          color: #dc3545;
          background: #fff5f5;
          padding: 12px;
          border-radius: 4px;
          border-left: 3px solid #dc3545;
          margin-bottom: 20px;
        `,
      };

      const section = document.createElement("div");
      section.style.marginBottom = "24px";

      const heading = document.createElement("h3");
      heading.style.cssText = `
        margin: 0 0 8px 0;
        font-size: 16px;
        color: #333;
        font-weight: 600;
      `;
      heading.textContent = errorSection.title;

      const contentDiv = document.createElement("div");
      contentDiv.style.cssText = errorSection.style;
      contentDiv.textContent = errorSection.content;

      section.appendChild(heading);
      section.appendChild(contentDiv);
      this.content.appendChild(section);

      this.dialog.showModal();
      return;
    }

    // Create sections for different parts of the result
    const sections = [
      {
        title: "Match Reason",
        content: result.matchReason,
        style: `
          font-size: 14px;
          line-height: 1.5;
          color: #333;
          margin-bottom: 20px;
        `,
      },
      {
        title: "Relevant Snippet",
        content: result.relevantSnippet,
        style: `
          font-family: monospace;
          background: #f8f9fa;
          padding: 12px;
          border-radius: 4px;
          border-left: 3px solid #0066cc;
          font-size: 14px;
          line-height: 1.5;
          overflow-x: auto;
          white-space: pre-wrap;
          color: #333;
          margin-bottom: 20px;
        `,
      },
      {
        title: "View Conversation",
        content: "Click to view conversation and jump to matching message",
        style: `
          font-size: 14px;
          color: #0066cc;
          cursor: pointer;
          margin-bottom: 20px;
          padding: 8px 12px;
          background: #f0f7ff;
          border-radius: 4px;
          display: inline-block;
          transition: all 0.2s ease;
          &:hover {
            background-color: #e0f0ff;
            transform: translateY(-1px);
          }
        `,
        isLink: true,
      },
    ];

    // Add each section
    sections.forEach(({ title, content, style, isLink }) => {
      const section = document.createElement("div");
      section.style.marginBottom = "24px";

      const heading = document.createElement("h3");
      heading.style.cssText = `
        margin: 0 0 8px 0;
        font-size: 16px;
        color: #333;
        font-weight: 600;
      `;
      heading.textContent = title;

      const contentDiv = document.createElement("div");
      contentDiv.style.cssText = style;
      contentDiv.textContent = content;

      if (isLink) {
        contentDiv.addEventListener("click", async () => {
          try {
            // Get organization ID
            const orgId = getOrganizationId();
            if (!orgId) {
              this.showError(
                contentDiv,
                "Unable to get organization ID. Please ensure you're logged in to Claude."
              );
              return;
            }

            // Notify parent to show conversation
            this.onViewConversation(result.conversationId, result.messageId);
          } catch (error) {
            console.error("Failed to load conversation:", error);
            this.showError(
              contentDiv,
              "Unable to load conversation. Please try refreshing the page."
            );
          }
        });
      }

      section.appendChild(heading);
      section.appendChild(contentDiv);
      this.content.appendChild(section);
    });

    this.dialog.showModal();
  }

  /**
   * Hides the preview dialog
   */
  public hide(): void {
    this.dialog.close();
  }

  /**
   * Cleans up the component
   */
  public destroy(): void {
    this.dialog.remove();
  }
}
