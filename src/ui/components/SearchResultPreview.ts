/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/ui/components/SearchResultPreview.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

import type { SearchResultInfo } from "../../types";
import { ConversationRetrieval } from "../../services/ConversationRetrieval";
import { getOrganizationId } from "../../utils/getClaudeIds";
import { DraggableManager } from "./DraggableManager";
import { ThemeManager, ThemeColors } from "../theme";

export class SearchResultPreview {
  private dialog: HTMLElement;
  private content: HTMLDivElement;
  private header: HTMLDivElement;
  private navigation: HTMLDivElement;
  private currentIndex: number = 0;
  private results: SearchResultInfo[] = [];
  private onViewConversation: (
    conversationId: string,
    messageId: string
  ) => void;
  private draggableManager: DraggableManager;
  private colors: ThemeColors;

  constructor(
    onViewConversation: (conversationId: string, messageId: string) => void
  ) {
    this.colors = ThemeManager.getColors();
    this.dialog = document.createElement("div");
    this.content = document.createElement("div");
    this.header = document.createElement("div");
    this.navigation = document.createElement("div");
    this.onViewConversation = onViewConversation;
    this.setupDialog();
    this.draggableManager = new DraggableManager(this.dialog, this.header);

    // Listen for theme changes
    ThemeManager.addThemeChangeListener(() => {
      this.colors = ThemeManager.getColors();
      this.updateTheme();
    });
  }

  private updateTheme(): void {
    this.dialog.style.background = this.colors.background;
    this.header.style.background = this.colors.headerBg;
    this.header.style.borderBottom = `1px solid ${this.colors.border}`;
    this.navigation.style.background = this.colors.headerBg;
    this.navigation.style.borderBottom = `1px solid ${this.colors.border}`;

    // Update navigation buttons
    const buttons = this.navigation.querySelectorAll("button");
    buttons.forEach((button) => {
      button.style.background = this.colors.background;
      button.style.color = this.colors.text;
      button.style.borderColor = this.colors.border;
    });

    // Update counter
    const counter = this.navigation.querySelector("span");
    if (counter) {
      counter.style.color = this.colors.text;
    }

    // Update content
    const headings = this.content.querySelectorAll("h3");
    headings.forEach((heading) => {
      heading.style.color = this.colors.text;
    });

    const sections = this.content.querySelectorAll(
      'div[style*="margin-bottom: 24px"] > div'
    );
    sections.forEach((section) => {
      const element = section as HTMLElement;
      if (element.style.background === this.colors.codeBg) {
        element.style.background = this.colors.codeBg;
        element.style.color = this.colors.text;
      } else if (element.style.background === `${this.colors.primary}1a`) {
        element.style.background = `${this.colors.primary}1a`;
        element.style.color = this.colors.primary;
      }
    });
  }

  private setupDialog(): void {
    this.dialog.style.cssText = `
      padding: 0;
      border: none;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      max-width: 800px;
      width: 90vw;
      max-height: 80vh;
      background: ${this.colors.background};
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000002;
      display: none;
    `;

    this.header.style.cssText = `
      padding: 16px;
      background: ${this.colors.headerBg};
      border-bottom: 1px solid ${this.colors.border};
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-radius: 8px 8px 0 0;
      cursor: move;
    `;

    const title = document.createElement("h2");
    title.style.cssText = `
      margin: 0;
      font-size: 18px;
      color: ${this.colors.text};
    `;
    title.textContent = "Search Result Details";

    const closeButton = document.createElement("button");
    closeButton.style.cssText = `
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      color: ${this.colors.text};
      padding: 4px 8px;
    `;
    closeButton.textContent = "Ã—";
    closeButton.addEventListener("click", () => this.hide());
    closeButton.addEventListener("mouseover", () => {
      closeButton.style.background = this.colors.hoverBg;
    });
    closeButton.addEventListener("mouseout", () => {
      closeButton.style.background = "none";
    });

    this.header.appendChild(title);
    this.header.appendChild(closeButton);

    this.navigation.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 16px;
      background: ${this.colors.headerBg};
      border-bottom: 1px solid ${this.colors.border};
    `;

    this.content.style.cssText = `
      padding: 16px;
      max-height: calc(80vh - 160px);
      overflow-y: auto;
      color: ${this.colors.text};
    `;

    this.dialog.appendChild(this.header);
    this.dialog.appendChild(this.navigation);
    this.dialog.appendChild(this.content);

    document.body.appendChild(this.dialog);
  }

  private updateNavigation(): void {
    this.navigation.innerHTML = "";

    if (this.results.length <= 1) {
      this.navigation.style.display = "none";
      return;
    }

    this.navigation.style.display = "flex";

    const buttonStyle = `
      padding: 4px 12px;
      border: 1px solid ${this.colors.border};
      border-radius: 4px;
      background: ${this.colors.background};
      cursor: pointer;
      color: ${this.colors.text};
      font-size: 14px;
      &:hover {
        background: ${this.colors.hoverBg};
      }
      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
    `;

    const prevButton = document.createElement("button");
    prevButton.style.cssText = buttonStyle;
    prevButton.textContent = "Previous";
    prevButton.disabled = this.currentIndex === 0;
    prevButton.addEventListener("click", () => {
      if (this.currentIndex > 0) {
        this.currentIndex--;
        this.displayResult(this.results[this.currentIndex]);
        this.updateNavigation();
      }
    });

    const counter = document.createElement("span");
    counter.style.cssText = `
      color: ${this.colors.text};
      font-size: 14px;
    `;
    counter.textContent = `Result ${this.currentIndex + 1} of ${
      this.results.length
    }`;

    const nextButton = document.createElement("button");
    nextButton.style.cssText = buttonStyle;
    nextButton.textContent = "Next";
    nextButton.disabled = this.currentIndex === this.results.length - 1;
    nextButton.addEventListener("click", () => {
      if (this.currentIndex < this.results.length - 1) {
        this.currentIndex++;
        this.displayResult(this.results[this.currentIndex]);
        this.updateNavigation();
      }
    });

    this.navigation.appendChild(prevButton);
    this.navigation.appendChild(counter);
    this.navigation.appendChild(nextButton);
  }

  private showError(container: HTMLElement, message: string): void {
    const errorDiv = document.createElement("div");
    errorDiv.style.cssText = `
      color: ${this.colors.error};
      padding: 8px 12px;
      background: ${this.colors.codeBg};
      border-radius: 4px;
      margin-top: 8px;
      font-size: 14px;
    `;
    errorDiv.textContent = message;

    const existingError = container.querySelector("[data-error]");
    if (existingError) {
      existingError.remove();
    }

    errorDiv.setAttribute("data-error", "true");
    container.appendChild(errorDiv);
  }

  private displayResult(result: SearchResultInfo): void {
    this.content.innerHTML = "";

    const sections = [
      {
        title: "Match Reason",
        content: result.matchReason,
        style: `
          font-size: 14px;
          line-height: 1.5;
          color: ${this.colors.text};
          margin-bottom: 20px;
        `,
      },
      {
        title: "Relevant Snippet",
        content: result.relevantSnippet,
        style: `
          font-family: monospace;
          background: ${this.colors.codeBg};
          padding: 12px;
          border-radius: 4px;
          border-left: 3px solid ${this.colors.primary};
          font-size: 14px;
          line-height: 1.5;
          overflow-x: auto;
          white-space: pre-wrap;
          color: ${this.colors.text};
          margin-bottom: 20px;
        `,
      },
      {
        title: "View Conversation",
        content: "Click to view conversation and jump to matching message",
        style: `
          font-size: 14px;
          color: ${this.colors.primary};
          cursor: pointer;
          margin-bottom: 20px;
          padding: 8px 12px;
          background: ${this.colors.primary}1a;
          border-radius: 4px;
          display: inline-block;
          transition: all 0.2s ease;
          &:hover {
            background: ${this.colors.primary}33;
            transform: translateY(-1px);
          }
        `,
        isLink: true,
      },
    ];

    sections.forEach(({ title, content, style, isLink }) => {
      const section = document.createElement("div");
      section.style.marginBottom = "24px";

      const heading = document.createElement("h3");
      heading.style.cssText = `
        margin: 0 0 8px 0;
        font-size: 16px;
        color: ${this.colors.text};
        font-weight: 600;
      `;
      heading.textContent = title;

      const contentDiv = document.createElement("div");
      contentDiv.style.cssText = style;
      contentDiv.textContent = content;

      if (isLink) {
        contentDiv.addEventListener("click", async () => {
          try {
            const orgId = getOrganizationId();
            if (!orgId) {
              this.showError(
                contentDiv,
                "Unable to get organization ID. Please ensure you're logged in to Claude."
              );
              return;
            }

            this.onViewConversation(result.conversationId, result.messageId);
          } catch (error) {
            console.error("Failed to load conversation:", error);
            this.showError(
              contentDiv,
              "Unable to load conversation. Please try refreshing the page."
            );
          }
        });
      }

      section.appendChild(heading);
      section.appendChild(contentDiv);
      this.content.appendChild(section);
    });
  }

  public show(results: SearchResultInfo[] | string): void {
    this.currentIndex = 0;

    if (typeof results === "string") {
      this.results = [];
      this.content.innerHTML = "";
      this.navigation.style.display = "none";

      const errorSection = {
        title: "Error Details",
        content: results,
        style: `
          font-size: 14px;
          line-height: 1.5;
          color: ${this.colors.error};
          background: ${this.colors.codeBg};
          padding: 12px;
          border-radius: 4px;
          border-left: 3px solid ${this.colors.error};
          margin-bottom: 20px;
        `,
      };

      const section = document.createElement("div");
      section.style.marginBottom = "24px";

      const heading = document.createElement("h3");
      heading.style.cssText = `
        margin: 0 0 8px 0;
        font-size: 16px;
        color: ${this.colors.text};
        font-weight: 600;
      `;
      heading.textContent = errorSection.title;

      const contentDiv = document.createElement("div");
      contentDiv.style.cssText = errorSection.style;
      contentDiv.textContent = errorSection.content;

      section.appendChild(heading);
      section.appendChild(contentDiv);
      this.content.appendChild(section);
    } else {
      this.results = results;
      if (results.length > 0) {
        this.displayResult(results[0]);
      }
    }

    this.updateNavigation();
    this.dialog.style.display = "block";
  }

  public getPosition(): { x: number; y: number } {
    const rect = this.dialog.getBoundingClientRect();
    return {
      x: rect.left,
      y: rect.top,
    };
  }

  public getDimensions(): { width: number; height: number } {
    const rect = this.dialog.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
    };
  }

  public hide(): void {
    this.dialog.style.display = "none";
  }

  public destroy(): void {
    ThemeManager.removeThemeChangeListener(this.updateTheme.bind(this));
    this.draggableManager.destroy();
    this.dialog.remove();
  }
}
