/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/ClaudeExtension.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Main extension class that handles UI and script execution after required elements exist.
 * Note: This class assumes elements are already present - initialization happens in content.ts
 */

import { FloatingWindow } from "./ui/components/FloatingWindow";
import { DraggableManager } from "./ui/components/DraggableManager";
import { StatusManager } from "./ui/components/StatusManager";
import { UIStateManager } from "./ui/components/UIStateManager";
import { ScriptExecutionManager } from "./services/ScriptExecutionManager";
import { HelpManager } from "./ui/components/HelpManager";
import { StarredItemsPreview } from "./ui/components/StarredItemsPreview";
import { AliasService } from "./services/AliasService";
import type { FloatingWindowElements, StatusElements } from "./types";

export class ClaudeExtension {
  private floatingWindow?: FloatingWindow;
  private draggableManager?: DraggableManager;
  private statusManager?: StatusManager;
  private uiStateManager?: UIStateManager;
  private scriptExecutionManager?: ScriptExecutionManager;
  private helpManager?: HelpManager;
  private starredItemsPreview?: StarredItemsPreview;

  /**
   * Initialize UI components and bind event listeners.
   * Should only be called after required elements exist in the DOM.
   */
  public async initializeUI(): Promise<void> {
    console.log("Initializing UI components...");

    try {
      // Initialize AliasService first
      AliasService.initialize();

      // Create UI components
      this.floatingWindow = new FloatingWindow();
      const windowElement = await this.floatingWindow.create();
      const elements = this.floatingWindow.getElements();

      // Create status elements mapping
      const statusElements: StatusElements = {
        statusElement: elements.status,
        statusText: elements.statusText,
        statusDetails: elements.statusDetails,
        scriptInput: elements.scriptText,
        runButton: elements.runButton,
      };

      // Set up managers
      this.statusManager = new StatusManager(statusElements);
      this.draggableManager = new DraggableManager(
        windowElement,
        elements.status
      );
      this.uiStateManager = new UIStateManager(elements, this.statusManager);
      this.scriptExecutionManager = new ScriptExecutionManager(
        this.statusManager,
        this.handleLog.bind(this),
        elements.output
      );
      this.helpManager = new HelpManager(elements.output);
      this.starredItemsPreview = new StarredItemsPreview();

      // Bind event listeners
      this.bindEventListeners(elements);

      console.log("UI initialization complete");
    } catch (error) {
      console.error("UI initialization failed:", error);
      throw error;
    }
  }

  /**
   * Binds event listeners to UI elements
   */
  private bindEventListeners(elements: FloatingWindowElements): void {
    // Run button triggers script execution
    elements.runButton.addEventListener("click", () =>
      this.handleRunScript(elements.scriptText)
    );

    // Help button shows help text
    elements.helpButton.addEventListener("click", () =>
      this.helpManager?.show()
    );

    // Starred button shows starred items
    elements.starredButton.addEventListener("click", () =>
      this.starredItemsPreview?.show()
    );

    // Minimize and collapse buttons control window state
    elements.minimizeButton.addEventListener("click", () =>
      this.uiStateManager?.toggleMinimize()
    );
    elements.collapseButton.addEventListener("click", () =>
      this.uiStateManager?.toggleCollapse()
    );
  }

  /**
   * Handles script execution from the UI
   */
  private async handleRunScript(
    scriptText: HTMLTextAreaElement
  ): Promise<void> {
    if (!this.scriptExecutionManager) {
      this.handleLog("Script execution manager not initialized", "error");
      return;
    }

    if (this.statusManager?.getCurrentState() === "working") {
      this.scriptExecutionManager.cancel();
    } else {
      await this.scriptExecutionManager.executeScript(scriptText.value);
    }
  }

  /**
   * Handles logging output to the UI
   */
  private handleLog(
    message: string,
    type: "info" | "error" | "success" = "info"
  ): void {
    console.log(message);
    this.uiStateManager?.log(message, type);
  }

  /**
   * Cleans up the component
   */
  public destroy(): void {
    this.floatingWindow?.destroy();
    this.draggableManager?.destroy();
    this.starredItemsPreview?.destroy();
  }
}
