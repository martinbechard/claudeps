/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/services/WindowStateService.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Service for managing and persisting window state
 * Note: Remembering your window preferences, so you don't have to!
 */

interface WindowGeometry {
  x: number;
  y: number;
  width: string;
  height: string;
  isMinimized: boolean;
  isCollapsed: boolean;
  isScriptMode: boolean;
  scriptHeight?: string;
}

export class WindowStateService {
  private static readonly STORAGE_KEY = "claude_extension_window_state";
  private static readonly DEFAULT_STATE: WindowGeometry = {
    x: 20,
    y: 20,
    width: "400px",
    height: "500px",
    isMinimized: false,
    isCollapsed: false,
    scriptHeight: "100px",
    isScriptMode: false,
  };

  /**
   * Loads the saved window state from storage
   */
  public static loadState(): WindowGeometry {
    try {
      const savedState = localStorage.getItem(this.STORAGE_KEY);
      if (savedState) {
        return JSON.parse(savedState);
      }
    } catch (error) {
      console.error("Failed to load window state:", error);
    }
    return { ...this.DEFAULT_STATE };
  }

  /**
   * Saves the current window state to storage
   */
  public static saveState(state: Partial<WindowGeometry>): void {
    try {
      const currentState = this.loadState();
      const newState = { ...currentState, ...state };
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newState));
    } catch (error) {
      console.error("Failed to save window state:", error);
    }
  }

  public static saveMode(isScriptMode: boolean): void {
    this.saveState({ isScriptMode });
  }

  /**
   * Updates window position
   */
  public static savePosition(x: number, y: number): void {
    this.saveState({ x, y });
  }

  /**
   * Updates window dimensions
   */
  public static saveGeometry(width: string, height: string): void {
    this.saveState({ width, height });
  }

  /**
   * Updates script textarea height
   */
  public static saveScriptHeight(height: string): void {
    this.saveState({ scriptHeight: height });
  }

  /**
   * Updates window state flags
   */
  public static saveWindowState(
    isMinimized: boolean,
    isCollapsed: boolean
  ): void {
    this.saveState({ isMinimized, isCollapsed });
  }

  /**
   * Applies saved state to window element
   */
  public static applyState(
    windowElement: HTMLElement,
    scriptElement?: HTMLElement
  ): void {
    const state = this.loadState();

    // Set absolute positioning
    windowElement.style.position = "absolute";
    windowElement.style.right = "auto"; // Clear any right positioning

    // Always apply position, even when minimized
    windowElement.style.left = `${state.x}px`;
    windowElement.style.top = `${state.y}px`;

    // Apply dimensions if not minimized
    if (!state.isMinimized) {
      windowElement.style.width = state.width;
      windowElement.style.height = state.height;
    } else {
      // Clear dimensions but maintain position when minimized
      windowElement.style.width = "";
      windowElement.style.height = "";
      windowElement.classList.add("minimized");
    }

    // Apply script height if element provided
    if (scriptElement && state.scriptHeight) {
      scriptElement.style.height = state.scriptHeight;
    }

    // Handle collapse state
    if (state.isCollapsed) {
      const outputDiv = windowElement.querySelector(
        "#scriptOutput"
      ) as HTMLElement;
      if (outputDiv) {
        outputDiv.style.maxHeight = "3em";
        outputDiv.style.overflowY = "hidden";
      }
    }
  }
}
