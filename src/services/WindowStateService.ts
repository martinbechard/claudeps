/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/services/WindowStateService.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Service for managing and persisting window state
 * Note: Remembering your window preferences, so you don't have to!
 */

import { StorageService } from "./StorageService";

interface WindowGeometry {
  x: number;
  y: number;
  width: string;
  height: string;
  isMinimized: boolean;
  isCollapsed: boolean;
  isScriptMode: boolean;
  scriptHeight?: string;
}

export class WindowStateService {
  private static readonly STORAGE_KEY = "claude_extension_window_state";
  private static readonly DEFAULT_STATE: WindowGeometry = {
    x: 20,
    y: 20,
    width: "400px",
    height: "500px",
    isMinimized: false,
    isCollapsed: false,
    scriptHeight: "100px",
    isScriptMode: false,
  };

  /**
   * Loads the saved window state from storage
   */
  public static async loadState(): Promise<WindowGeometry> {
    try {
      const savedState = undefined; /* await StorageService.get<WindowGeometry>(
        this.STORAGE_KEY
      );*/
      return savedState || { ...this.DEFAULT_STATE };
    } catch (error) {
      console.error("Failed to load window state:", error);
      return { ...this.DEFAULT_STATE };
    }
  }

  /**
   * Saves the current window state to storage
   */
  public static async saveState(state: Partial<WindowGeometry>): Promise<void> {
    try {
      const currentState = await this.loadState();
      const newState = { ...currentState, ...state };
      await StorageService.set(this.STORAGE_KEY, newState);
    } catch (error) {
      console.error("Failed to save window state:", error);
    }
  }

  public static async saveMode(isScriptMode: boolean): Promise<void> {
    await this.saveState({ isScriptMode });
  }

  /**
   * Updates window position
   */
  public static async savePosition(x: number, y: number): Promise<void> {
    await this.saveState({ x, y });
  }

  /**
   * Updates window dimensions
   */
  public static async saveGeometry(
    width: string,
    height: string
  ): Promise<void> {
    await this.saveState({ width, height });
  }

  /**
   * Updates script textarea height
   */
  public static async saveScriptHeight(height: string): Promise<void> {
    await this.saveState({ scriptHeight: height });
  }

  /**
   * Updates window state flags
   */
  public static async saveWindowState(
    isMinimized: boolean,
    isCollapsed: boolean
  ): Promise<void> {
    await this.saveState({ isMinimized, isCollapsed });
  }

  /**
   * Ensures coordinates are within viewport bounds
   */
  private static constrainToViewport(
    x: number,
    y: number,
    width: number,
    height: number
  ): { x: number; y: number } {
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    // Ensure at least 100px of the window is always visible
    const minVisibleWidth = Math.min(width, 100);
    const minVisibleHeight = Math.min(height, 100);

    return {
      x: Math.min(Math.max(0, x), viewportWidth - minVisibleWidth),
      y: Math.min(Math.max(0, y), viewportHeight - minVisibleHeight),
    };
  }

  /**
   * Applies saved state to window element
   */
  public static async applyState(
    windowElement: HTMLElement,
    scriptElement?: HTMLElement
  ): Promise<void> {
    const state = await this.loadState();

    // Set absolute positioning
    windowElement.style.position = "absolute";
    windowElement.style.right = "auto"; // Clear any right positioning

    // Get window dimensions
    const width = parseInt(state.width) || 400;
    const height = parseInt(state.height) || 500;

    // Constrain position to viewport
    const { x, y } = this.constrainToViewport(state.x, state.y, width, height);

    // Always apply constrained position, even when minimized
    windowElement.style.left = `${x}px`;
    windowElement.style.top = `${y}px`;

    // Apply dimensions if not minimized
    if (!state.isMinimized) {
      windowElement.style.width = state.width;
      windowElement.style.height = state.height;
    } else {
      // Clear dimensions but maintain position when minimized
      windowElement.style.width = "";
      windowElement.style.height = "";
      windowElement.classList.add("minimized");
    }

    // Apply script height if element provided
    if (scriptElement && state.scriptHeight) {
      scriptElement.style.height = state.scriptHeight;
    }

    // Handle collapse state
    if (state.isCollapsed) {
      const outputDiv = windowElement.querySelector(
        "#scriptOutput"
      ) as HTMLElement;
      if (outputDiv) {
        outputDiv.style.maxHeight = "3em";
        outputDiv.style.overflowY = "hidden";
      }
    }
  }
}
