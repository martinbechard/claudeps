/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/services/CommandExecutor.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Handles execution of Claude extension commands
 */

import { COMMAND_MAP } from "../utils/commands/CommandMap";
import type { ScriptStatement } from "../types";
import type { StatusManager } from "../ui/components/StatusManager";
import { ProjectSearchService } from "./ProjectSearchService";

type LogFunction = (
  message: string,
  type?: "info" | "error" | "success"
) => void;

export class CommandExecutor {
  private readonly statusManager: StatusManager;
  private readonly handleLog: LogFunction;
  private readonly outputElement: HTMLElement;

  constructor(
    statusManager: StatusManager,
    handleLog: LogFunction,
    outputElement: HTMLElement
  ) {
    this.statusManager = statusManager;
    this.handleLog = handleLog;
    this.outputElement = outputElement;

    // Hook up the script's Cancel button to abort functionality
    this.statusManager.onCancel = () => {
      ProjectSearchService.abortSearch();
    };
  }

  /**
   * Gets the output element used for displaying command results
   */
  public getOutputElement(): HTMLElement {
    return this.outputElement;
  }

  /**
   * Executes a command using its command object's execute method
   */
  public async executeCommand(script: ScriptStatement): Promise<void> {
    if (!script.command) {
      throw new Error("No command specified");
    }

    const commandInfo = COMMAND_MAP[script.command];
    if (!commandInfo) {
      throw new Error(`Unknown command: ${script.command}`);
    }

    const success = await commandInfo.execute({
      statement: script,
      outputElement: this.outputElement,
      handleLog: this.handleLog,
      setStatus: this.statusManager.setStatus.bind(this.statusManager),
    });

    if (!success) {
      throw new Error(`Command execution failed: ${script.command}`);
    }
  }
}
