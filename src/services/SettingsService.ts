/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/services/SettingsService.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

export interface Settings {
  anthropicApiKey?: string;
  model?: string;
}

/**
 * Service for managing extension settings using Chrome's storage sync API
 * with local storage fallback in development mode
 */
export class SettingsService {
  private static readonly STORAGE_KEY = "anthropic_api_settings";
  private static readonly IS_DEV_MODE = process.env.NODE_ENV === "development";
  private static readonly DEFAULT_MODEL = "claude-3-5-sonnet-20241022";

  /**
   * Gets settings from local storage (dev mode only)
   */
  private static getLocalSettings(): Settings {
    if (!this.IS_DEV_MODE) return {};

    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return {};
      return JSON.parse(stored);
    } catch (e) {
      console.error("Failed to parse local settings:", e);
      return {};
    }
  }

  /**
   * Saves settings to local storage (dev mode only)
   */
  private static setLocalSettings(settings: Settings): void {
    if (!this.IS_DEV_MODE) return;

    try {
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(settings));
      console.log("[Dev Mode] Saved settings to localStorage:", settings);
    } catch (e) {
      console.error("Failed to save local settings:", e);
    }
  }

  /**
   * Gets all settings from Chrome sync storage
   * Falls back to local storage in dev mode if Chrome storage is empty
   */
  public static async getSettings(): Promise<Settings> {
    return new Promise((resolve) => {
      chrome.storage.sync.get([this.STORAGE_KEY], (result) => {
        const settings = result[this.STORAGE_KEY] || {};

        // In dev mode, merge with local storage settings
        if (this.IS_DEV_MODE) {
          const localSettings = this.getLocalSettings();
          const mergedSettings = { ...settings, ...localSettings };
          console.log("[Dev Mode] Using merged settings:", mergedSettings);
          resolve(mergedSettings);
        } else {
          resolve(settings);
        }
      });
    });
  }

  /**
   * Sets a setting value in Chrome sync storage
   * Also saves to local storage in dev mode
   */
  public static async setSetting(
    key: keyof Settings,
    value: string
  ): Promise<void> {
    const settings = await this.getSettings();
    settings[key] = value;

    // In dev mode, also save to local storage
    if (this.IS_DEV_MODE) {
      this.setLocalSettings(settings);
    }

    // Always save to chrome.storage.sync
    return new Promise((resolve) => {
      chrome.storage.sync.set({ [this.STORAGE_KEY]: settings }, () => {
        if (this.IS_DEV_MODE) {
          console.log("[Dev Mode] Saved settings to chrome.storage:", settings);
        }
        resolve();
      });
    });
  }

  /**
   * Gets a single setting value
   */
  public static async getSetting(
    key: keyof Settings
  ): Promise<string | undefined> {
    const settings = await this.getSettings();
    return settings[key] || (key === "model" ? this.DEFAULT_MODEL : undefined);
  }

  /**
   * Validates an Anthropic API key format
   * @returns Error message if invalid, null if valid
   */
  public static validateApiKey(key: string): string | null {
    if (!key) {
      return "API key is required";
    }
    if (!key.startsWith("sk-ant-")) {
      return 'Invalid API key format. Must start with "sk-ant-"';
    }
    if (key.length < 32) {
      return "API key appears too short";
    }
    return null;
  }

  /**
   * Validates a model name format
   * @returns Error message if invalid, null if valid
   */
  public static validateModel(model: string): string | null {
    if (!model) {
      return "Model is required";
    }
    if (!model.startsWith("claude-")) {
      return 'Invalid model format. Must start with "claude-"';
    }
    return null;
  }

  /**
   * Validates that required settings are configured
   */
  public static async validateSettings(): Promise<{
    valid: boolean;
    message?: string;
  }> {
    const settings = await this.getSettings();

    if (!settings.anthropicApiKey) {
      return {
        valid: false,
        message:
          "Please configure your Anthropic API key in the extension settings",
      };
    }

    const keyError = this.validateApiKey(settings.anthropicApiKey);
    if (keyError) {
      return {
        valid: false,
        message: `Invalid API key: ${keyError}`,
      };
    }

    return { valid: true };
  }
}
