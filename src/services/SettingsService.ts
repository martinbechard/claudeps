/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/services/SettingsService.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

import { ChromeSettingsService } from "./ChromeSettingsService";

export interface Settings {
  anthropicApiKey?: string;
  model?: string;
  theme?: "light" | "dark";
  enableAnthropicApi?: boolean;
  debugTraceRequests?: boolean;
  debugWindowEvents?: boolean;
  downloadRoot?: string;
}

/**
 * Service for managing extension settings using ChromeSettingsService
 */
export class SettingsService {
  private static readonly STORAGE_KEY = "anthropic_api_settings";
  private static readonly DEFAULT_MODEL = "claude-3-5-sonnet-20241022";
  private static readonly DEFAULT_THEME = "light" as const;
  private static readonly DEFAULT_ENABLE_ANTHROPIC = false;
  private static readonly DEFAULT_DEBUG_TRACE = false;
  private static readonly DEFAULT_DEBUG_WINDOW = false;

  /**
   * Gets all settings from storage
   */
  public static async getSettings(): Promise<Settings> {
    const settings = await ChromeSettingsService.get<Settings>(
      this.STORAGE_KEY
    );
    return settings || {};
  }

  /**
   * Sets a setting value in storage
   */
  public static async setSetting<K extends keyof Settings>(
    key: K,
    value: Settings[K]
  ): Promise<void> {
    const settings = await this.getSettings();
    settings[key] = value;
    await ChromeSettingsService.set(this.STORAGE_KEY, settings);
  }

  /**
   * Gets a single setting value
   */
  public static async getSetting(
    key: keyof Settings
  ): Promise<string | boolean | undefined> {
    const settings = await this.getSettings();
    if (key === "theme") {
      return settings[key] ?? this.DEFAULT_THEME;
    }
    if (key === "enableAnthropicApi") {
      return settings[key] ?? this.DEFAULT_ENABLE_ANTHROPIC;
    }
    if (key === "debugTraceRequests") {
      return settings[key] ?? this.DEFAULT_DEBUG_TRACE;
    }
    if (key === "debugWindowEvents") {
      return settings[key] ?? this.DEFAULT_DEBUG_WINDOW;
    }
    if (key === "model") {
      return settings[key] ?? this.DEFAULT_MODEL;
    }
    return settings[key];
  }

  /**
   * Validates an Anthropic API key format
   * @returns Error message if invalid, null if valid
   */
  public static validateApiKey(key: string): string | null {
    if (!key.startsWith("sk-ant-")) {
      return 'Invalid API key format. Must start with "sk-ant-"';
    }
    if (key.length < 32) {
      return "API key appears too short";
    }
    return null;
  }

  /**
   * Validates a model name format
   * @returns Error message if invalid, null if valid
   */
  public static validateModel(model: string): string | null {
    if (!model) {
      return "Model is required";
    }
    if (!model.startsWith("claude-")) {
      return 'Invalid model format. Must start with "claude-"';
    }
    return null;
  }

  /**
   * Validates a theme value
   * @returns Error message if invalid, null if valid
   */
  public static validateTheme(theme: string): string | null {
    if (!theme) {
      return "Theme is required";
    }
    if (theme !== "light" && theme !== "dark") {
      return "Theme must be either 'light' or 'dark'";
    }
    return null;
  }

  /**
   * Validates that required settings are configured
   */
  public static async validateSettings(): Promise<{
    valid: boolean;
    message?: string;
  }> {
    const settings = await this.getSettings();

    if (!settings.enableAnthropicApi) {
      return { valid: true };
    }

    if (!settings.anthropicApiKey) {
      return {
        valid: false,
        message:
          "Please configure your Anthropic API key in the extension settings",
      };
    }

    const keyError = this.validateApiKey(settings.anthropicApiKey);
    if (keyError) {
      return {
        valid: false,
        message: `Invalid API key: ${keyError}`,
      };
    }

    return { valid: true };
  }
}
