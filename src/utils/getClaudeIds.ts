/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: /Users/martinbechard/dev/claudeext/src/utils/getClaudeIds.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 *
 * Utility functions for retrieving organization and project IDs from Claude
 */

import { getHeaders } from "./getHeaders";
import type { Conversation } from "../types";

const API_URL = "https://api.claude.ai/api/organizations";

/**
 * Gets project and conversation IDs from the current URL
 */
export function getIdsFromUrl(): {
  projectId: string | null;
  conversationId: string | null;
} {
  const projectMatch = window.location.pathname.match(/\/project\/([^\/]+)/);
  if (projectMatch) {
    return { projectId: projectMatch[1], conversationId: null };
  }

  const chatMatch = window.location.pathname.match(/\/chat\/([^\/]+)/);
  if (!chatMatch) {
    throw new Error(
      "Please navigate to a Claude chat or project page before using this command"
    );
  }

  return {
    projectId: null,
    conversationId: chatMatch[1],
  };
}

/**
 * Gets the organization ID from cookies
 * @throws Error if organization ID is not found or invalid
 */
export function getOrganizationId(): string {
  const cookie = document.cookie
    .split("; ")
    .find((row) => row.startsWith("lastActiveOrg="));

  if (!cookie) {
    throw new Error("Organization ID not found in cookies");
  }

  try {
    const value = decodeURIComponent(cookie.split("=")[1]);
    return value.replace(/^"|"$/g, "");
  } catch (error) {
    throw new Error("Invalid organization ID format in cookie");
  }
}

/**
 * Gets the project UUID for API requests
 * @param organizationId - Organization ID to use for API request
 * @returns Promise resolving to project UUID
 * @throws Error if project UUID cannot be retrieved
 */
export async function getProjectUuid(organizationId: string): Promise<string> {
  const { projectId, conversationId } = getIdsFromUrl();

  if (projectId) {
    return projectId;
  }

  if (conversationId) {
    const response = await fetch(
      `${API_URL}/${organizationId}/chat_conversations/${conversationId}?tree=True&rendering_mode=messages`,
      {
        method: "GET",
        headers: getHeaders(),
        credentials: "include",
      }
    );

    if (!response.ok) {
      throw new Error(
        `Failed to fetch conversation details: ${response.status}`
      );
    }

    const data: Conversation = await response.json();
    const projectUuid = data.project_uuid;

    if (!projectUuid) {
      throw new Error("Project UUID not found in conversation details");
    }

    return projectUuid;
  }

  throw new Error("No project or conversation ID found in URL");
}
