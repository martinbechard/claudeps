/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/utils/commands/parseContentCommands.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

import {
  ParsedCommandLine,
  ScriptStatement,
  CommandOptions,
} from "../../types";

/**
 * Processes basic content command options
 */
function processContentOptions(
  options: Record<string, string>
): CommandOptions {
  const commandOptions: CommandOptions = {};

  // Process options
  for (const [key, _] of Object.entries(options)) {
    switch (key.toLowerCase()) {
      case "artifacts":
      case "a":
        commandOptions.includeArtifacts = true;
        break;
      case "multiple":
      case "m":
        commandOptions.downloadMultiple = true;
        break;
      default:
        throw new Error(`Unknown option: /${key}`);
    }
  }

  return commandOptions;
}

/**
 * Parses a conversation command
 */
export function parseConversationCommand(
  parsedCommandLine: ParsedCommandLine
): ScriptStatement {
  const { options } = parsedCommandLine;
  const commandOptions = processContentOptions(options);

  // Conversation specific defaults
  commandOptions.includeConversation = true;

  // Validate options
  if (commandOptions.downloadMultiple && !commandOptions.includeArtifacts) {
    throw new Error("/multiple can only be used with /artifacts option");
  }

  return new ScriptStatement({
    isCommand: true,
    command: "conversation",
    options: commandOptions,
    prompt: parsedCommandLine.prompt.trim(),
  });
}

/**
 * Parses an artifacts command
 */
export function parseArtifactsCommand(
  parsedCommandLine: ParsedCommandLine
): ScriptStatement {
  const { options } = parsedCommandLine;
  const commandOptions = processContentOptions(options);

  // Artifacts command always includes artifacts
  commandOptions.includeArtifacts = true;
  commandOptions.includeConversation = false;

  return new ScriptStatement({
    isCommand: true,
    command: "artifacts",
    options: commandOptions,
    prompt: parsedCommandLine.prompt.trim(),
  });
}
