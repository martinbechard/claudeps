/**
 * Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
 * This software is licensed under the MIT License.
 * File: src/content.ts
 * This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
 */

import { ClaudeExtension } from "./ClaudeExtension";

console.log("Claude Extension loading...");

// Prevent multiple initializations
if ((window as any).claudeExtInitialized) {
  console.log("Claude Extension already initialized, skipping...");
} else {
  console.log("Claude Extension initializing...");

  // Simple element waiter - keeping what works
  function waitForElement(selector: string): Promise<Element> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        observer.disconnect();
        reject(new Error(`Timeout waiting for element: ${selector}`));
      }, 30000);

      if (document.querySelector(selector)) {
        console.log("Element found immediately:", selector);
        clearTimeout(timeout);
        return resolve(document.querySelector(selector)!);
      }

      console.log("Waiting for element:", selector);
      const observer = new MutationObserver(() => {
        if (document.querySelector(selector)) {
          console.log("Element found after mutation:", selector);
          clearTimeout(timeout);
          observer.disconnect();
          resolve(document.querySelector(selector)!);
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    });
  }

  // Initialize with same pattern as working version
  async function initialize() {
    try {
      console.log("Starting initialization...");

      // Check if we're on claude.ai
      if (!window.location.hostname.includes("claude.ai")) {
        console.log("Not on claude.ai, skipping initialization");
        return;
      }

      console.log("Waiting for Claude chat interface...");

      // Wait for elements BEFORE creating any UI
      await waitForElement('div[enterkeyhint="enter"]');
      console.log("Chat container found");

      // Only now create the UI
      const extension = new ClaudeExtension();
      await extension.initializeUI();

      // Only NOW mark as initialized - after everything is complete
      (window as any).claudeExtInitialized = true;
      console.log("Initialization complete");
    } catch (error) {
      console.error("Initialization failed:", error);
      // Show error to user
      const errorDiv = document.createElement("div");
      errorDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #ffebee;
                color: #c62828;
                padding: 15px;
                border-radius: 8px;
                z-index: 999999;
                font-family: Arial, sans-serif;
                box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            `;
      errorDiv.textContent = `Claude Extension Error: ${
        error instanceof Error ? error.message : "Unknown error"
      }`;
      document.body.appendChild(errorDiv);
      setTimeout(() => errorDiv.remove(), 5000);
    }
  }

  // Use proper async/await for initialization timing
  if (document.readyState === "loading") {
    console.log("Document loading, adding DOMContentLoaded listener...");
    document.addEventListener("DOMContentLoaded", async () => {
      // Wait for initialization to complete before continuing
      await initialize();
    });
  } else {
    console.log("Document already loaded, initializing...");
    // Wait for initialization to complete before continuing
    (async () => {
      await initialize();
    })();
  }
}
