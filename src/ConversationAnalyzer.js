"use strict";
// Copyright (c) 2024 Martin Bechard martin.bechard@DevConsult.ca
// This software is licensed under the MIT License.
// Path: src/ConversationAnalyzer.ts
// This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
// Analyzes conversation data to extract metrics about message lengths and totals
// "I analyze conversations so thoroughly, I can tell you how many characters it takes to say 'hello' in every language!"
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationAnalyzer = void 0;
/**
 * Analyzes conversation data to extract various metrics about message lengths
 */
var ConversationAnalyzer = /** @class */ (function () {
    /**
     * Creates a new ConversationAnalyzer instance
     * @param data Array of conversations to analyze
     */
    function ConversationAnalyzer(data) {
        this.conversations = data;
    }
    /**
     * Analyzes all conversations and returns comprehensive metrics
     * @returns Analysis results including per-conversation metrics and total size
     */
    ConversationAnalyzer.prototype.analyze = function () {
        var _this = this;
        var metrics = this.conversations.map(function (conv) {
            return _this.analyzeConversation(conv);
        });
        var totalSize = metrics.reduce(function (sum, conv) { return sum + conv.totalSize; }, 0);
        return {
            conversationMetrics: metrics,
            totalSize: totalSize,
        };
    };
    /**
     * Analyzes a single conversation to extract its metrics
     * @param conversation The conversation to analyze
     * @returns Metrics for the specific conversation
     */
    ConversationAnalyzer.prototype.analyzeConversation = function (conversation) {
        var messageLengths = conversation.messages.map(function (msg) { return ({
            length: msg.content.length,
            messageId: msg.id,
        }); });
        var longestMessage = messageLengths.reduce(function (max, current) { return (current.length > max.length ? current : max); }, messageLengths[0]);
        var totalSize = messageLengths.reduce(function (sum, msg) { return sum + msg.length; }, 0);
        return {
            conversationId: conversation.id,
            conversationName: conversation.name,
            messageLengths: messageLengths,
            longestMessage: longestMessage,
            totalSize: totalSize,
        };
    };
    /**
     * Creates an instance from a JSON file
     * @param jsonString The JSON string containing conversation data
     * @returns A new ConversationAnalyzer instance
     */
    ConversationAnalyzer.fromJson = function (jsonString) {
        var data = JSON.parse(jsonString);
        return new ConversationAnalyzer(data);
    };
    return ConversationAnalyzer;
}());
exports.ConversationAnalyzer = ConversationAnalyzer;
