// content.js - v1.4
try {
  function createScriptingWindow() {
    console.log("Creating window v1.4...");
    const windowHTML = `
        <div class="floating-window">
          <div class="status ready" style="display: flex; align-items: center; gap: 10px; justify-content: flex-start;">
            <div style="display: flex; align-items: center; gap: 5px; flex-grow: 1;">
              <span class="status-text">READY</span>
              <span class="status-details"></span>
            </div>
            <button id="helpButton" style="font-size: 12px; padding: 2px 8px;">?</button>
          </div>
          <div class="input-container">
            <div class="script-container">
              <textarea id="scriptText" placeholder="Simple prompt:
Type your prompt here

-- or --

DO MAX 3 UNTIL success
Your prompt here"></textarea>
              <div class="resize-handle"></div>
            </div>
            <button id="runScript">Run Script</button>
            <div class="output-container">
              <div id="scriptOutput"></div>
              <div id="collapseButton" style="cursor: pointer; user-select: none; padding: 5px;">▼</div>
            </div>
          </div>
        </div>
      `;

    const container = document.createElement("div");
    container.innerHTML = windowHTML;
    document.body.appendChild(container);

    const floatingWindow = container.querySelector(".floating-window");
    const status = container.querySelector(".status");
    const statusText = container.querySelector(".status-text");
    const statusDetails = container.querySelector(".status-details");
    const scriptContainer = container.querySelector(".script-container");
    const scriptText = container.querySelector("#scriptText");
    const resizeHandle = container.querySelector(".resize-handle");
    const runButton = container.querySelector("#runScript");
    const helpButton = container.querySelector("#helpButton");
    const outputDiv = container.querySelector("#scriptOutput");
    const collapseButton = container.querySelector("#collapseButton");

    // Script area resize functionality
    let isResizingScript = false;
    let scriptInitialHeight;
    let scriptInitialY;

    resizeHandle.addEventListener("mousedown", (e) => {
      isResizingScript = true;
      scriptInitialHeight = scriptContainer.offsetHeight;
      scriptInitialY = e.clientY;
      document.body.style.cursor = "row-resize";
      e.preventDefault();
    });

    document.addEventListener("mousemove", (e) => {
      if (isResizingScript) {
        const deltaY = e.clientY - scriptInitialY;
        const newHeight = Math.max(100, scriptInitialHeight + deltaY);
        scriptContainer.style.height = `${newHeight}px`;
        e.preventDefault();
      }
    });

    document.addEventListener("mouseup", () => {
      if (isResizingScript) {
        isResizingScript = false;
        document.body.style.cursor = "";
      }
    });

    let isRunning = false;
    let isCollapsed = false;

    collapseButton.addEventListener("click", () => {
      isCollapsed = !isCollapsed;
      outputDiv.style.maxHeight = isCollapsed ? "3em" : "";
      outputDiv.style.overflowY = isCollapsed ? "hidden" : "auto";
      collapseButton.textContent = isCollapsed ? "▶" : "▼";
    });

    // Make window draggable
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;

    status.addEventListener("mousedown", (e) => {
      if (
        e.target === status ||
        e.target === statusText ||
        e.target === statusDetails
      ) {
        isDragging = true;
        initialX = e.clientX - floatingWindow.offsetLeft;
        initialY = e.clientY - floatingWindow.offsetTop;

        // Set position to absolute when starting drag
        floatingWindow.style.position = "absolute";
        floatingWindow.style.right = "auto";
      }
    });

    document.addEventListener("mousemove", (e) => {
      if (isDragging) {
        e.preventDefault();
        currentX = e.clientX - initialX;
        currentY = e.clientY - initialY;

        // Ensure window stays within viewport bounds
        currentX = Math.max(
          0,
          Math.min(currentX, window.innerWidth - floatingWindow.offsetWidth)
        );
        currentY = Math.max(
          0,
          Math.min(currentY, window.innerHeight - floatingWindow.offsetHeight)
        );

        floatingWindow.style.left = `${currentX}px`;
        floatingWindow.style.top = `${currentY}px`;
      }
    });

    document.addEventListener("mouseup", () => {
      isDragging = false;
    });

    function showHelp() {
      const helpText = `
  Scripting Interface v1.4
  
  1. Simple Prompt:
  Just type your prompt and it will be sent once.
  
  2. Loop Until Format:
  First line: DO [MAX <number>] UNTIL <text>
  Following lines: Your prompt
  
  3. Commands:
  /docs - List available documents
  
  Examples:
  -------------------
  Simple prompt:
  Tell me a joke
  
  -------------------
  With search:
  DO UNTIL laugh
  Tell me a joke
  
  -------------------
  With max tries:
  DO MAX 3 UNTIL success
  Do something
  
  -------------------
  Notes:
  - MAX is optional (defaults to 5)
  - UNTIL text is case-sensitive
  - Prompt can be multiple lines
  - Click arrow to toggle log view
        `.trim();

      outputDiv.innerHTML = "";
      helpText.split("\n").forEach((line) => {
        const div = document.createElement("div");
        div.textContent = line;
        div.style.whiteSpace = "pre";
        outputDiv.appendChild(div);
      });
    }

    function addLog(message, type = "info") {
      console.log(message);
      const log = document.createElement("div");
      log.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      log.style.color =
        type === "error" ? "red" : type === "success" ? "green" : "black";
      outputDiv.appendChild(log);
      outputDiv.scrollTop = outputDiv.scrollHeight;
    }

    async function setStatus(state, details = "") {
      console.log("Status:", state, details);
      const states = {
        ready: { text: "READY", class: "ready" },
        working: { text: "WORKING", class: "working" },
        error: { text: "ERROR", class: "error" },
      };

      const currentState = states[state] || states.ready;
      statusText.textContent = currentState.text;
      statusDetails.textContent = details;
      status.className = `status ${currentState.class}`;
      scriptText.disabled = state === "working";

      if (state === "working") {
        runButton.textContent = "Cancel";
        runButton.disabled = false;
      } else {
        runButton.textContent = "Run Script";
        runButton.disabled = false;
      }
    }

    async function fetchDocs() {
      try {
        const table = document.createElement("table");
        table.style.width = "100%";
        table.style.borderCollapse = "collapse";
        table.style.marginTop = "10px";

        // Create table header
        const header = table.createTHead();
        const headerRow = header.insertRow();

        // Create header checkbox cell
        const checkboxTh = document.createElement("th");
        checkboxTh.style.border = "1px solid #ccc";
        checkboxTh.style.padding = "4px";
        const headerCheckbox = document.createElement("input");
        headerCheckbox.type = "checkbox";
        headerCheckbox.addEventListener("change", (e) => {
          const checkboxes = table.querySelectorAll(
            "tbody input[type='checkbox']"
          );
          checkboxes.forEach((checkbox) => {
            checkbox.checked = e.target.checked;
          });
        });
        checkboxTh.appendChild(headerCheckbox);
        headerRow.appendChild(checkboxTh);

        // Add other headers
        ["Name", "Path"].forEach((text) => {
          const th = document.createElement("th");
          th.style.border = "1px solid #ccc";
          th.style.padding = "4px";
          th.style.textAlign = "left";
          th.textContent = text;
          headerRow.appendChild(th);
        });

        // Create table body
        const tbody = table.createTBody();

        const response = await fetch(
          "https://claude.ai/api/organizations/bf87e242-36bf-4b51-9c43-c5a92083e517/projects/a58a32b6-f598-473d-bfe5-a84d1af9015b/docs",
          {
            method: "GET",
            headers: {
              Accept: "*/*",
              "Accept-Encoding": "gzip, deflate, br, zstd",
              "Accept-Language": "en-US,en;q=0.9,fr-CA;q=0.8,fr;q=0.7",
              "Anthropic-Client-Sha": "unknown",
              "Anthropic-Client-Version": "unknown",
              "Cache-Control": "no-cache",
              "Content-Type": "application/json",
              Origin: "https://claude.ai",
              Pragma: "no-cache",
              Referer: "https://claude.ai/",
              "Sec-Ch-Ua":
                '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
              "Sec-Ch-Ua-Mobile": "?0",
              "Sec-Ch-Ua-Platform": '"macOS"',
              Priority: "u=1, i",
            },
            credentials: "include",
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        // Process each document
        for (const doc of data) {
          // Check if file has the required header
          if (
            doc.content &&
            doc.content.includes("This was generated by Claude Sonnet")
          ) {
            // Extract file path
            const filePathMatch = doc.content.match(/File: (.+)/);
            if (filePathMatch) {
              const row = tbody.insertRow();
              row.style.borderBottom = "1px solid #ccc";

              // Checkbox cell
              const checkCell = row.insertCell();
              const checkbox = document.createElement("input");
              checkbox.type = "checkbox";
              checkCell.appendChild(checkbox);
              checkCell.style.padding = "4px";
              checkCell.style.border = "1px solid #ccc";

              // Name cell
              const nameCell = row.insertCell();
              nameCell.textContent = doc.file_name;
              nameCell.style.padding = "4px";
              nameCell.style.border = "1px solid #ccc";

              // Path cell
              const pathCell = row.insertCell();
              pathCell.textContent = filePathMatch[1];
              pathCell.style.padding = "4px";
              pathCell.style.border = "1px solid #ccc";
            }
          }
        }

        // Clear output and add table
        outputDiv.innerHTML = "";
        if (tbody.rows.length > 0) {
          outputDiv.appendChild(table);

          // Add export button
          const exportButton = document.createElement("button");
          exportButton.textContent = "Export Selected Files";
          exportButton.className = "export-button";
          exportButton.addEventListener("click", () => {
            const selectedFiles = [];
            const checkboxes = tbody.querySelectorAll("input[type='checkbox']");
            checkboxes.forEach((checkbox, index) => {
              if (checkbox.checked) {
                const row = checkbox.closest("tr");
                selectedFiles.push({
                  name: row.cells[1].textContent,
                  path: row.cells[2].textContent,
                });
              }
            });
            console.log("Selected files:", selectedFiles);
            addLog(`Selected files: ${JSON.stringify(selectedFiles, null, 2)}`);
          });
          outputDiv.appendChild(exportButton);

          addLog(
            `Found ${tbody.rows.length} Claude-generated documents`,
            "success"
          );
        } else {
          addLog("No Claude-generated documents found", "info");
        }
      } catch (error) {
        addLog(`Error fetching documents: ${error.message}`, "error");
      }
    }

    function parseScript(text) {
      const lines = text.split("\n");
      const script = {
        maxTries: 5,
        findText: null,
        prompt: text,
        isCommand: false,
        command: null,
      };

      const firstLine = lines[0].trim();

      // Check for commands
      if (firstLine === "/docs") {
        script.isCommand = true;
        script.command = "docs";
        return script;
      }

      if (firstLine.startsWith("DO")) {
        const match = firstLine.match(/DO(?:\s+MAX\s+(\d+))?\s+UNTIL\s+(.+)/i);
        if (match) {
          script.maxTries = match[1] ? parseInt(match[1]) : 5;
          script.findText = match[2].trim();
          script.prompt = lines.slice(1).join("\n").trim();
        } else {
          throw new Error(
            "Invalid DO UNTIL syntax. Use: DO [MAX <number>] UNTIL <text>"
          );
        }
      }

      if (!script.prompt) {
        throw new Error("No prompt provided");
      }

      return script;
    }

    async function checkStreaming() {
      let stableCount = 0;
      let attempts = 0;
      const maxAttempts = 300;
      let lastContent = "";
      let lastStreamingDiv = null;

      while (attempts < maxAttempts && isRunning) {
        const streamingDiv = document.querySelector(
          'div[data-is-streaming="true"]'
        );

        if (streamingDiv) {
          if (streamingDiv.textContent !== lastContent) {
            stableCount = 0;
            lastContent = streamingDiv.textContent;
            lastStreamingDiv = streamingDiv;
          } else {
            stableCount++;
          }
        } else if (lastStreamingDiv) {
          return lastStreamingDiv.textContent;
        } else {
          stableCount++;
        }

        if (stableCount >= 20) {
          return lastContent;
        }

        await new Promise((resolve) => setTimeout(resolve, 100));
        attempts++;
      }

      if (!isRunning) {
        throw new Error("Operation cancelled");
      }
      throw new Error("Response timeout");
    }

    async function simulateEnterKey(element) {
      const events = [
        new KeyboardEvent("keydown", {
          key: "Enter",
          code: "Enter",
          keyCode: 13,
          which: 13,
          bubbles: true,
          cancelable: true,
        }),
        new KeyboardEvent("keypress", {
          key: "Enter",
          code: "Enter",
          keyCode: 13,
          which: 13,
          bubbles: true,
          cancelable: true,
        }),
        new KeyboardEvent("keyup", {
          key: "Enter",
          code: "Enter",
          keyCode: 13,
          which: 13,
          bubbles: true,
          cancelable: true,
        }),
      ];

      for (const event of events) {
        element.dispatchEvent(event);
      }
    }

    async function runScript() {
      if (isRunning) {
        isRunning = false;
        addLog("Operation cancelled by user", "error");
        setStatus("ready", "Cancelled");
        return;
      }

      const text = scriptText.value.trim();
      if (!text) {
        addLog("Please enter a script", "error");
        return;
      }

      try {
        isRunning = true;
        setStatus("working", "Running script...");
        outputDiv.innerHTML = "";
        addLog("Script Interface v1.4");

        const script = parseScript(text);
        addLog("Script parsed successfully");

        // Handle commands
        if (script.isCommand) {
          if (script.command === "docs") {
            addLog("Fetching documents...");
            await fetchDocs();
            setStatus("ready", "Complete");
            isRunning = false;
            return;
          }
        }

        if (script.findText) {
          addLog(`Mode: Loop until "${script.findText}" is found`);
          addLog(`Max tries: ${script.maxTries}`);
        } else {
          addLog("Mode: Single prompt");
        }
        addLog(`Prompt: ${script.prompt}`);

        let tries = 0;
        while (tries < script.maxTries && isRunning) {
          try {
            if (script.findText) {
              addLog(`Attempt ${tries + 1}/${script.maxTries}`);
            }
            setStatus(
              "working",
              script.findText
                ? `Attempt ${tries + 1}/${script.maxTries}`
                : "Running..."
            );

            const targetDiv = document.querySelector(
              'div[enterkeyhint="enter"]'
            );
            if (!targetDiv) {
              throw new Error("Input div not found");
            }

            targetDiv.innerHTML = `<p>${script.prompt}</p>`;
            targetDiv.focus();
            await new Promise((resolve) => setTimeout(resolve, 100));

            await simulateEnterKey(targetDiv);

            const response = await checkStreaming();
            if (!isRunning) break;

            addLog(`Response received (${response.length} chars)`);

            if (!script.findText || response.includes(script.findText)) {
              addLog("Success!", "success");
              setStatus("ready", "Complete");
              isRunning = false;
              return;
            }

            if (!script.findText) {
              setStatus("ready", "Complete");
              isRunning = false;
              return;
            }

            if (tries < script.maxTries - 1) {
              addLog(`Text "${script.findText}" not found, trying again...`);
              await new Promise((resolve) => setTimeout(resolve, 1000));
            }

            tries++;
          } catch (error) {
            if (!isRunning) break;
            addLog(`Error: ${error.message}`, "error");
            if (tries < script.maxTries - 1) {
              await new Promise((resolve) => setTimeout(resolve, 2000));
            }
            tries++;
          }
        }

        if (isRunning && script.findText) {
          addLog(
            `Max tries (${script.maxTries}) reached without finding: "${script.findText}"`,
            "error"
          );
        }
      } catch (error) {
        if (isRunning) {
          addLog(`Script error: ${error.message}`, "error");
          setStatus("error", error.message);
          setTimeout(() => setStatus("ready"), 2000);
        }
      } finally {
        isRunning = false;
        setStatus("ready", isRunning ? "Cancelled" : "Complete");
      }
    }

    // Event Listeners
    helpButton.addEventListener("click", showHelp);
    runButton.addEventListener("click", runScript);
    scriptText.addEventListener("keydown", (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === "Enter") {
        runButton.click();
        e.preventDefault();
      }
    });

    // Show initial version in log
    addLog("Script Interface v1.4");
  }

  // Initialize
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", createScriptingWindow);
  } else {
    createScriptingWindow();
  }
} catch (error) {
  console.error("Error in content script:", error);
}
